import SwiftUI
import Charts

// üîπ –ú–æ–¥–µ–ª—å –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
struct CryptoAsset: Identifiable, Codable {
    let id: String
    let symbol: String
    let current_price: Double
}

// üìå –ì–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
struct HomeView: View {
    @State private var cryptoData: [CryptoAsset] = []
    @State private var balanceHistory: [Double] = []
    @AppStorage("userBalance") private var portfolioValue: Double = 0.0
    @State private var marqueeText: String = "üöÄ Bitcoin –¥–æ—Å—è–≥ $70,000! | Ethereum –∑—Ä–æ—Å—Ç–∞—î –Ω–∞ 5% | üìâ Dogecoin –ø–∞–¥–∞—î | üîî –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ | üì∞ –ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω ‚Äî —É –¥–æ–¥–∞—Ç–∫—É!"

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 0) {
                    // üü¶ –ë—ñ–≥—É—á–∞ —Å—Ç—Ä—ñ—á–∫–∞
                    MarqueeView(text: marqueeText)

                    VStack(alignment: .leading, spacing: 20) {
                        // üí∞ –ë–∞–ª–∞–Ω—Å
                        HStack {
                            VStack(alignment: .leading) {
                                Text("–ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å")
                                    .font(.headline)
                                    .foregroundColor(.gray)
                                Text("$\(String(format: "%.2f", portfolioValue))")
                                    .font(.largeTitle)
                                    .fontWeight(.bold)
                            }
                            Spacer()
                            NavigationLink(destination: ProfileView()) {
                                Image(systemName: "person.circle.fill")
                                    .resizable()
                                    .frame(width: 30, height: 30)
                                    .foregroundColor(.blue)
                            }
                        }
                        .padding()

                        // üìà –ì—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É
                        ChartView(balanceHistory: balanceHistory)

                        // üî• –ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
                        Text("–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∞–∫—Ç–∏–≤–∏")
                            .font(.title2)
                            .fontWeight(.bold)
                            .padding(.horizontal)

                        if cryptoData.isEmpty {
                            Text("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
                                .foregroundColor(.gray)
                                .padding()
                        } else {
                            ForEach(cryptoData) { crypto in
                                CryptoCard(name: crypto.symbol.uppercased(), price: crypto.current_price)
                            }
                        }

                        // üîµ –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
                        HStack {
                            ActionButton(title: "–ö—É–ø–∏—Ç–∏", color: .green)
                            ActionButton(title: "–ü—Ä–æ–¥–∞—Ç–∏", color: .red)
                            ActionButton(title: "–ü–æ–ø–æ–≤–Ω–∏—Ç–∏", color: .blue)
                        }
                        .padding()
                    }
                    .padding(.top, 20)
                }
            }
            .onAppear {
                fetchCryptoData()
                loadBalanceHistory()
            }
        }
    }

    func fetchCryptoData() {
        let urlString = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin,ethereum,tether,binancecoin,solana"
        guard let url = URL(string: urlString) else { return }

        URLSession.shared.dataTask(with: url) { data, _, error in
            if let data = data {
                do {
                    let fetchedData = try JSONDecoder().decode([CryptoAsset].self, from: data)
                    DispatchQueue.main.async {
                        self.cryptoData = fetchedData
                    }
                } catch {
                    print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: \(error)")
                }
            }
        }.resume()
    }

    func loadBalanceHistory() {
        if let savedData = UserDefaults.standard.array(forKey: "balanceHistory") as? [Double] {
            balanceHistory = savedData
        }
    }
}

// üìä –ì—Ä–∞—Ñ—ñ–∫ –±–∞–ª–∞–Ω—Å—É
struct ChartView: View {
    var balanceHistory: [Double]

    var body: some View {
        VStack {
            Text("–ó–º—ñ–Ω–∞ –±–∞–ª–∞–Ω—Å—É (7 –¥–Ω—ñ–≤)")
                .font(.headline)
                .padding(.bottom, 5)
            Chart {
                ForEach(Array(balanceHistory.enumerated()), id: \.0) { index, value in
                    LineMark(
                        x: .value("–î–µ–Ω—å", index),
                        y: .value("–ë–∞–ª–∞–Ω—Å", value)
                    )
                    .foregroundStyle(.blue)
                }
            }
            .frame(height: 150)
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(15)
        .padding(.horizontal)
    }
}

// üìå –ö–∞—Ä—Ç–æ—á–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
struct CryptoCard: View {
    var name: String
    var price: Double

    var body: some View {
        HStack {
            Image(systemName: "bitcoinsign.circle.fill")
                .resizable()
                .frame(width: 40, height: 40)
                .foregroundColor(.orange)
            VStack(alignment: .leading) {
                Text(name)
                    .font(.headline)
                Text("$\(String(format: "%.2f", price))")
                    .font(.subheadline)
                    .foregroundColor(.gray)
            }
            Spacer()
        }
        .padding()
        .background(Color(.systemGray6))
        .cornerRadius(15)
        .padding(.horizontal)
    }
}

// üü¢ –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
struct ActionButton: View {
    var title: String
    var color: Color

    var body: some View {
        Button(action: {}) {
            Text(title)
                .fontWeight(.bold)
                .frame(maxWidth: .infinity)
                .padding()
                .background(color)
                .foregroundColor(.white)
                .cornerRadius(15)
        }
    }
}

struct MarqueeView: View {
    var text: String
    @State private var offset: CGFloat = 0
    @State private var textWidth: CGFloat = 0
    @State private var containerWidth: CGFloat = 0
    @State private var isAnimating = false

    let spacing: CGFloat = 60
    let speed: CGFloat = 30 // —à–≤–∏–¥–∫—ñ—Å—Ç—å (–±—ñ–ª—å—à–µ = –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ)
    let delayBetweenAnimations: TimeInterval = 3.0 // ‚è± –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø—Ä–æ—Ö–æ–¥–∞–º–∏

    var body: some View {
        GeometryReader { geo in
            ZStack {
                Color.blue
                    .frame(height: 30)
                    .cornerRadius(8)

                HStack(spacing: spacing) {
                    marqueeText
                }
                .offset(x: offset)
                .onAppear {
                    containerWidth = geo.size.width
                }
                .onChange(of: textWidth) { _ in
                    if !isAnimating && textWidth > 0 {
                        startAnimation()
                    }
                }
            }
        }
        .frame(height: 30)
        .padding(.horizontal)
    }

    var marqueeText: some View {
        Text(text)
            .font(.subheadline)
            .fontWeight(.semibold)
            .foregroundColor(.white)
            .background(
                GeometryReader { geo in
                    Color.clear
                        .onAppear {
                            textWidth = geo.size.width
                        }
                }
            )
    }

    func startAnimation() {
        isAnimating = true
        let totalDistance = textWidth + containerWidth + spacing
        let duration = Double(totalDistance) / Double(speed)

        offset = containerWidth
        withAnimation(.linear(duration: duration)) {
            offset = -textWidth - spacing
        }

        // üïí –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –∑–∞–ø—É—Å–∫ –∑ –ø–∞—É–∑–æ—é
        DispatchQueue.main.asyncAfter(deadline: .now() + duration + delayBetweenAnimations) {
            isAnimating = false
            startAnimation()
        }
    }
}

// üñ• –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥
#Preview {
    HomeView()
}
